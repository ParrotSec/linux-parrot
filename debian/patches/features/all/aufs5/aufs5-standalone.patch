From: J. R. Okajima <hooanon05@yahoo.co.jp>
Date: Tue Apr 7 22:14:47 2020 +0900
Subject: aufs5.6 standalone patch
Origin: https://github.com/sfjro/aufs5-standalone/tree/7c07d9737e9de058981f020d66ac0d4407a80899
Bug-Debian: https://bugs.debian.org/541828

Patch headers added by debian/bin/genpatch-aufs

SPDX-License-Identifier: GPL-2.0
aufs5.6 standalone patch

Index: debian-kernel/fs/dcache.c
===================================================================
--- debian-kernel.orig/fs/dcache.c
+++ debian-kernel/fs/dcache.c
@@ -1390,6 +1390,7 @@ rename_retry:
 	seq = 1;
 	goto again;
 }
+EXPORT_SYMBOL_GPL(d_walk);
 
 struct check_mount {
 	struct vfsmount *mnt;
@@ -2935,6 +2936,7 @@ void d_exchange(struct dentry *dentry1,
 
 	write_sequnlock(&rename_lock);
 }
+EXPORT_SYMBOL_GPL(d_exchange);
 
 /**
  * d_ancestor - search for an ancestor
Index: debian-kernel/fs/exec.c
===================================================================
--- debian-kernel.orig/fs/exec.c
+++ debian-kernel/fs/exec.c
@@ -111,6 +111,7 @@ bool path_noexec(const struct path *path
 	return (path->mnt->mnt_flags & MNT_NOEXEC) ||
 	       (path->mnt->mnt_sb->s_iflags & SB_I_NOEXEC);
 }
+EXPORT_SYMBOL_GPL(path_noexec);
 
 #ifdef CONFIG_USELIB
 /*
Index: debian-kernel/fs/fcntl.c
===================================================================
--- debian-kernel.orig/fs/fcntl.c
+++ debian-kernel/fs/fcntl.c
@@ -85,6 +85,7 @@ int setfl(int fd, struct file *filp, uns
  out:
 	return error;
 }
+EXPORT_SYMBOL_GPL(setfl);
 
 static void f_modown(struct file *filp, struct pid *pid, enum pid_type type,
                      int force)
Index: debian-kernel/fs/file_table.c
===================================================================
--- debian-kernel.orig/fs/file_table.c
+++ debian-kernel/fs/file_table.c
@@ -162,6 +162,7 @@ over:
 	}
 	return ERR_PTR(-ENFILE);
 }
+EXPORT_SYMBOL_GPL(alloc_empty_file);
 
 /*
  * Variant of alloc_empty_file() that doesn't check and modify nr_files.
@@ -376,6 +377,7 @@ void __fput_sync(struct file *file)
 }
 
 EXPORT_SYMBOL(fput);
+EXPORT_SYMBOL_GPL(__fput_sync);
 
 void __init files_init(void)
 {
Index: debian-kernel/fs/inode.c
===================================================================
--- debian-kernel.orig/fs/inode.c
+++ debian-kernel/fs/inode.c
@@ -1774,6 +1774,7 @@ int update_time(struct inode *inode, str
 		return inode->i_op->update_time(inode, time, flags);
 	return generic_update_time(inode, time, flags);
 }
+EXPORT_SYMBOL_GPL(update_time);
 
 /**
  *	touch_atime	-	update the access time
Index: debian-kernel/fs/namespace.c
===================================================================
--- debian-kernel.orig/fs/namespace.c
+++ debian-kernel/fs/namespace.c
@@ -431,6 +431,7 @@ void __mnt_drop_write(struct vfsmount *m
 	mnt_dec_writers(real_mount(mnt));
 	preempt_enable();
 }
+EXPORT_SYMBOL_GPL(__mnt_drop_write);
 
 /**
  * mnt_drop_write - give up write access to a mount
@@ -797,6 +798,7 @@ int is_current_mnt_ns(struct vfsmount *m
 {
 	return check_mnt(real_mount(mnt));
 }
+EXPORT_SYMBOL_GPL(is_current_mnt_ns);
 
 /*
  * vfsmount lock must be held for write
@@ -1961,6 +1963,7 @@ int iterate_mounts(int (*f)(struct vfsmo
 	}
 	return 0;
 }
+EXPORT_SYMBOL_GPL(iterate_mounts);
 
 static void lock_mnt_tree(struct mount *mnt)
 {
Index: debian-kernel/fs/notify/group.c
===================================================================
--- debian-kernel.orig/fs/notify/group.c
+++ debian-kernel/fs/notify/group.c
@@ -100,6 +100,7 @@ void fsnotify_get_group(struct fsnotify_
 {
 	refcount_inc(&group->refcnt);
 }
+EXPORT_SYMBOL_GPL(fsnotify_get_group);
 
 /*
  * Drop a reference to a group.  Free it if it's through.
Index: debian-kernel/fs/open.c
===================================================================
--- debian-kernel.orig/fs/open.c
+++ debian-kernel/fs/open.c
@@ -65,6 +65,7 @@ int do_truncate(struct dentry *dentry, l
 	inode_unlock(dentry->d_inode);
 	return ret;
 }
+EXPORT_SYMBOL_GPL(do_truncate);
 
 long vfs_truncate(const struct path *path, loff_t length)
 {
Index: debian-kernel/fs/read_write.c
===================================================================
--- debian-kernel.orig/fs/read_write.c
+++ debian-kernel/fs/read_write.c
@@ -488,6 +488,7 @@ ssize_t vfs_read(struct file *file, char
 	inc_syscr(current);
 	return ret;
 }
+EXPORT_SYMBOL_GPL(vfs_read);
 
 static ssize_t new_sync_write(struct file *filp, const char __user *buf, size_t len, loff_t *ppos)
 {
@@ -517,6 +518,7 @@ vfs_readf_t vfs_readf(struct file *file)
 		return new_sync_read;
 	return ERR_PTR(-ENOSYS); /* doesn't have ->read(|_iter)() op */
 }
+EXPORT_SYMBOL_GPL(vfs_readf);
 
 vfs_writef_t vfs_writef(struct file *file)
 {
@@ -528,6 +530,7 @@ vfs_writef_t vfs_writef(struct file *fil
 		return new_sync_write;
 	return ERR_PTR(-ENOSYS); /* doesn't have ->write(|_iter)() op */
 }
+EXPORT_SYMBOL_GPL(vfs_writef);
 
 /* caller is responsible for file_start_write/file_end_write */
 ssize_t __kernel_write(struct file *file, const void *buf, size_t count, loff_t *pos)
@@ -608,6 +611,7 @@ ssize_t vfs_write(struct file *file, con
 	file_end_write(file);
 	return ret;
 }
+EXPORT_SYMBOL_GPL(vfs_write);
 
 /* file_ppos returns &file->f_pos or NULL if file is stream */
 static inline loff_t *file_ppos(struct file *file)
Index: debian-kernel/fs/splice.c
===================================================================
--- debian-kernel.orig/fs/splice.c
+++ debian-kernel/fs/splice.c
@@ -870,6 +870,7 @@ long do_splice_to(struct file *in, loff_
 		return in->f_op->splice_read(in, ppos, pipe, len, flags);
 	return default_file_splice_read(in, ppos, pipe, len, flags);
 }
+EXPORT_SYMBOL_GPL(do_splice_from);
 
 /**
  * splice_direct_to_actor - splices data directly between two non-pipes
@@ -1016,6 +1017,7 @@ static int direct_splice_actor(struct pi
 	return do_splice_from(pipe, file, sd->opos, sd->total_len,
 			      sd->flags);
 }
+EXPORT_SYMBOL_GPL(do_splice_to);
 
 /**
  * do_splice_direct - splices data directly between two files
Index: debian-kernel/fs/sync.c
===================================================================
--- debian-kernel.orig/fs/sync.c
+++ debian-kernel/fs/sync.c
@@ -39,6 +39,7 @@ int __sync_filesystem(struct super_block
 		sb->s_op->sync_fs(sb, wait);
 	return __sync_blockdev(sb->s_bdev, wait);
 }
+EXPORT_SYMBOL_GPL(__sync_filesystem);
 
 /*
  * Write out and wait upon all dirty data associated with this
Index: debian-kernel/fs/xattr.c
===================================================================
--- debian-kernel.orig/fs/xattr.c
+++ debian-kernel/fs/xattr.c
@@ -296,6 +296,7 @@ vfs_getxattr_alloc(struct dentry *dentry
 	*xattr_value = value;
 	return error;
 }
+EXPORT_SYMBOL_GPL(vfs_getxattr_alloc);
 
 ssize_t
 __vfs_getxattr(struct dentry *dentry, struct inode *inode, const char *name,
Index: debian-kernel/kernel/locking/lockdep.c
===================================================================
--- debian-kernel.orig/kernel/locking/lockdep.c
+++ debian-kernel/kernel/locking/lockdep.c
@@ -190,6 +190,7 @@ inline struct lock_class *lockdep_hlock_
 	 */
 	return lock_classes + class_idx;
 }
+EXPORT_SYMBOL_GPL(lockdep_hlock_class);
 #define hlock_class(hlock) lockdep_hlock_class(hlock)
 
 #ifdef CONFIG_LOCK_STAT
Index: debian-kernel/kernel/task_work.c
===================================================================
--- debian-kernel.orig/kernel/task_work.c
+++ debian-kernel/kernel/task_work.c
@@ -139,3 +139,4 @@ void task_work_run(void)
 		} while (work);
 	}
 }
+EXPORT_SYMBOL_GPL(task_work_run);
Index: debian-kernel/security/security.c
===================================================================
--- debian-kernel.orig/security/security.c
+++ debian-kernel/security/security.c
@@ -1096,6 +1096,7 @@ int security_path_rmdir(const struct pat
 		return 0;
 	return call_int_hook(path_rmdir, 0, dir, dentry);
 }
+EXPORT_SYMBOL_GPL(security_path_rmdir);
 
 int security_path_unlink(const struct path *dir, struct dentry *dentry)
 {
@@ -1112,6 +1113,7 @@ int security_path_symlink(const struct p
 		return 0;
 	return call_int_hook(path_symlink, 0, dir, dentry, old_name);
 }
+EXPORT_SYMBOL_GPL(security_path_symlink);
 
 int security_path_link(struct dentry *old_dentry, const struct path *new_dir,
 		       struct dentry *new_dentry)
@@ -1120,6 +1122,7 @@ int security_path_link(struct dentry *ol
 		return 0;
 	return call_int_hook(path_link, 0, old_dentry, new_dir, new_dentry);
 }
+EXPORT_SYMBOL_GPL(security_path_link);
 
 int security_path_rename(const struct path *old_dir, struct dentry *old_dentry,
 			 const struct path *new_dir, struct dentry *new_dentry,
@@ -1147,6 +1150,7 @@ int security_path_truncate(const struct
 		return 0;
 	return call_int_hook(path_truncate, 0, path);
 }
+EXPORT_SYMBOL_GPL(security_path_truncate);
 
 int security_path_chmod(const struct path *path, umode_t mode)
 {
@@ -1154,6 +1158,7 @@ int security_path_chmod(const struct pat
 		return 0;
 	return call_int_hook(path_chmod, 0, path, mode);
 }
+EXPORT_SYMBOL_GPL(security_path_chmod);
 
 int security_path_chown(const struct path *path, kuid_t uid, kgid_t gid)
 {
@@ -1161,6 +1166,7 @@ int security_path_chown(const struct pat
 		return 0;
 	return call_int_hook(path_chown, 0, path, uid, gid);
 }
+EXPORT_SYMBOL_GPL(security_path_chown);
 
 int security_path_chroot(const struct path *path)
 {
@@ -1261,6 +1267,7 @@ int security_inode_permission(struct ino
 		return 0;
 	return call_int_hook(inode_permission, 0, inode, mask);
 }
+EXPORT_SYMBOL_GPL(security_inode_permission);
 
 int security_inode_setattr(struct dentry *dentry, struct iattr *attr)
 {
@@ -1453,6 +1460,7 @@ int security_file_permission(struct file
 
 	return fsnotify_perm(file, mask);
 }
+EXPORT_SYMBOL_GPL(security_file_permission);
 
 int security_file_alloc(struct file *file)
 {
