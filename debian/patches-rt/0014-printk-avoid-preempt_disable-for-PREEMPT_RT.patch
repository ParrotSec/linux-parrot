From: John Ogness <john.ogness@linutronix.de>
Date: Thu, 20 Jan 2022 16:53:56 +0106
Subject: [PATCH 14/14] printk: avoid preempt_disable() for PREEMPT_RT
Origin: https://www.kernel.org/pub/linux/kernel/projects/rt/5.16/older/patches-5.16.2-rt19.tar.xz

During non-normal operation, printk() calls will attempt to
write the messages directly to the consoles. This involves
using console_trylock() to acquire @console_sem.

Since commit fd5f7cde1b85 ("printk: Never set
console_may_schedule in console_trylock()"), preemption is
disabled while directly printing to the consoles in order to
ensure that the printing task is not scheduled away while
holding @console_sem.

On PREEMPT_RT systems, disabling preemption here is not allowed
because console drivers will acquire spin locks (which under
PREEMPT_RT is an rtmutex).

For normal operation, direct printing is not used. In a panic
scenario, atomic consoles and spinlock busting are used to
handle direct printing. So the usefulness of disabling
preemption here is really restricted to early boot.

For PREEMPT_RT systems, do not disable preemption during direct
console printing. This also means that console handovers cannot
take place. Console handovers are also something that is really
restricted to early boot.

Signed-off-by: John Ogness <john.ogness@linutronix.de>
Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
---
 kernel/printk/printk.c |   29 ++++++++++++++++++++++++-----
 1 file changed, 24 insertions(+), 5 deletions(-)

--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -1873,6 +1873,7 @@ static int console_lock_spinning_disable
 	return 1;
 }
 
+#if (!IS_ENABLED(CONFIG_PREEMPT_RT))
 /**
  * console_trylock_spinning - try to get console_lock by busy waiting
  *
@@ -1936,6 +1937,7 @@ static int console_trylock_spinning(void
 
 	return 1;
 }
+#endif /* CONFIG_PREEMPT_RT */
 
 /*
  * Call the specified console driver, asking it to write out the specified
@@ -2268,19 +2270,31 @@ asmlinkage int vprintk_emit(int facility
 	/* If called from the scheduler, we can not call up(). */
 	if (!in_sched && !kthread_printers_active()) {
 		/*
+		 * Try to acquire and then immediately release the console
+		 * semaphore.  The release will print out buffers.
+		 */
+#if (IS_ENABLED(CONFIG_PREEMPT_RT))
+		/*
+		 * Use the non-spinning trylock since PREEMPT_RT does not
+		 * support console lock handovers.
+		 *
+		 * Direct printing will most likely involve taking spinlocks.
+		 * For PREEMPT_RT, this is only allowed if in a preemptible
+		 * context.
+		 */
+		if (preemptible() && console_trylock())
+			console_unlock();
+#else
+		/*
 		 * Disable preemption to avoid being preempted while holding
 		 * console_sem which would prevent anyone from printing to
 		 * console
 		 */
 		preempt_disable();
-		/*
-		 * Try to acquire and then immediately release the console
-		 * semaphore.  The release will print out buffers and wake up
-		 * /dev/kmsg and syslog() users.
-		 */
 		if (console_trylock_spinning())
 			console_unlock();
 		preempt_enable();
+#endif
 	}
 
 	wake_up_klogd();
@@ -2867,8 +2881,13 @@ static bool console_emit_next_record(str
 		len = record_print_text(&r, console_msg_format & MSG_FORMAT_SYSLOG, printk_time);
 	}
 
+#if (IS_ENABLED(CONFIG_PREEMPT_RT))
+	/* PREEMPT_RT does not support console lock handovers. */
+	allow_handover = false;
+#else
 	/* Handovers may only happen between trylock contexts. */
 	allow_handover = (handover && atomic_read(&console_lock_count) == -1);
+#endif
 
 	if (allow_handover) {
 		/*
